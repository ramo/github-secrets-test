name: Filter secrets and variables
on:
  workflow_dispatch:
    inputs:
      key1:
        description: 'key1'
        type: string
        required: false
      key2:
        description: 'key2'
        type: string
        required: false
      ramo-key-1:
        description: 'ramo-key-1'
        type: string
        required: false
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Filter secrets and variables
        run: |
          ENV_VARS_JSON="$(echo '${{ toJSON(secrets) }} ${{ toJSON(vars) }}' \
            | jq -s '.[0] * .[1]' \
            | jq '. | to_entries | map(select(.key | startswith("${{ vars.TEST_VAR_PREFIX }}")))' \
            | jq '.[] | map_values(sub("^${{ vars.TEST_VAR_PREFIX }}";""))' \
            | jq -s)"
          echo 'ENV_KEYS<<EOF' >> $GITHUB_ENV
          echo $ENV_VARS_JSON | jq '[.[].key]' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo $ENV_VARS_JSON \
            | jq -c '.[]' \
            | while read entry; do \
            KEY=$(echo $entry | jq -r '.key'); \
            VALUE=$(echo $entry | jq -r '.value'); \
            if [[ $(grep -c . <<<"$VALUE") > 1 ]]; then \
            echo "$KEY<<EOF" >> $GITHUB_ENV; \
            echo "$VALUE" >> $GITHUB_ENV; \
            echo 'EOF' >> $GITHUB_ENV; \
            else \
            echo "$KEY=$VALUE" >> $GITHUB_ENV; \
            fi \
            done
      - name: Override environment variables
        run: |
          INPUTS_JSON='${{ toJSON(inputs) }}'
          echo "$ENV_KEYS" \
            | jq -r '.[]' \
            | while read key; do \
            input_key="$(echo $key |  sed 's/_/-/g' | tr '[:upper:]' '[:lower:]')"; \
            value="$(echo "$INPUTS_JSON" | jq -r --arg key "$input_key" '.[$key] // empty')"; \
            if [[ ! -z $value ]]; then \
            echo "Overriding $key - old value: ${!key}, new value: $value"; \
            echo "$key=$value" >> $GITHUB_ENV; \
            fi \
            done
      - name: Print environment variables
        run: |
          echo "key1=$KEY1"
          echo "key2=$KEY2"
          echo "ramo_key_1=$RAMO_KEY_1"
          echo "pk = $PRIVATE_KEY"
