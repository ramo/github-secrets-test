name: Write Secrets
on:
  workflow_dispatch:
    inputs:
      key:
        description: key
        type: string
        required: true
      value:
        description: value
        type: string
        required: true
      environment-name:
        description: environment name
        type: string
        required: true
      secret:
        description: secret
        type: boolean
        required: false
        default: false
jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - name: Setup nodeJS
        uses: actions/setup-node@v4
        with:
          node-version: latest
      - name: Install libsodium-wrappers
        run: |
          npm i libsodium-wrappers
      - name: Write to GitHub secrets/vars
        uses: actions/github-script@v7
        with:
          result-encoding: string
          retries: 3
          github-token: ${{ secrets.MY_PAT }}
          script: |
            if (${{ inputs.secret }}) {
                const envPublicKey = await github.rest.actions.getEnvironmentPublicKey({
                    repository_id: context.payload.repository.id,
                    environment_name: '${{ inputs.environment-name }}'
                })
                const sodium = require('libsodium-wrappers')
                await sodium.ready
                // Convert the secret and key to a Uint8Array.
                let binkey = sodium.from_base64(envPublicKey.data.key, sodium.base64_variants.ORIGINAL)
                let binsec = sodium.from_string('${{ inputs.value }}')
                
                // Encrypt the secret using libsodium
                let encBytes = sodium.crypto_box_seal(binsec, binkey)

                // Convert the encrypted Uint8Array to Base64
                let encryptedValue = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
              
                await github.rest.actions.createOrUpdateEnvironmentSecret({
                  repository_id: context.payload.repository.id,
                  environment_name: '${{ inputs.environment-name }}',
                  secret_name: '${{ inputs.key }}',
                  encrypted_value: encryptedValue,
                  key_id: envPublicKey.data.key_id,
                });                
            } else {
                try {
                  await github.rest.actions.createEnvironmentVariable({
                      repository_id: context.payload.repository.id,
                      environment_name: '${{ inputs.environment-name }}',
                      name: '${{ inputs.key }}',
                      value: '${{ inputs.value }}'
                  });
                } catch(error) {
                  console.log(error.status)
                  console.log(error)
                }
            }
